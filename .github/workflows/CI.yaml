name: Module CI & Documentation

on:
  workflow_call:
    inputs:
      module_level:
        description: Possible values are [1|2|3|4]. Indicates the module level for which this workflow should run.
        required: true
        type: number

env:
  TFLINT_VERSION: v0.39.3
  TFSEC_VERSION: latest
  TFC_VERSION: 1.2.7
  
jobs:
  tflint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout 
      uses: actions/checkout@v3
      
    - name: TFLint - Setup
      uses: terraform-linters/setup-tflint@v2
      with:
        tflint_version: ${{ env.TFLINT_VERSION }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: TFLint - Version
      run: tflint --version

    - name: TFLint - Initialize
      run: tflint --init

    - name: TFLint - Run
      run: tflint -f compact
  
  tfsec:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: TFSec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true
        version: ${{ env.TFSEC_VERSION }}
        
  checkov:
    name: Policy Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        quiet: false
        soft_fail: false
        framework: terraform
        output_format: sarif
        download_external_modules: false
        log_level: WARNING
        
  terraform:
    needs: [tflint, tfsec, checkov]
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Terraform - Setup
      uses: hashicorp/setup-terraform@v2
      with: 
        terraform_version: ${{ env.TFC_VERSION }}
        cli_config_credentials_hostname: ${{ secrets.TFC_ADDR }}
        cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

    - name: Terraform - Init
      run: terraform init

    - name: Terraform - Validate
      run: terraform validate -no-color
      
    - name: Terraform - Speculative Plan
      if: ${{ inputs.module_level == 4 }}
      run: terraform plan

  documentation:
    if: ${{ inputs.module_level != 4 }}
    name: Documentation
    needs: [tflint, tfsec, checkov]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Render Documentation
      uses: terraform-docs/gh-actions@main
      with:
        output-method: replace
        git-push: "true"

  module_info:
    if: ${{ inputs.module_level != 4 }}
    name: Module Info
    needs: [tflint, tfsec, checkov]
    runs-on: ubuntu-latest
    outputs:
      module_name: ${{ steps.module_info.outputs.module_name }}
      module_path: ${{ steps.module_info.outputs.module_path }}    
      module_url: ${{ steps.module_info.outputs.module_url }}  
    steps:
    - name: Get Module Info
      id: module_info
      shell: pwsh
      run: |      
        $parts = '${{ github.repository }}' -split '/'
        $owner = $parts[0]
        $repo = $parts[1]
        $moduleName = $repo -replace 'l[1-4]\/terraform-\([^>]*\)-\(l[1-4]-.*\)', '$1'
        $modulePath = $repo -replace 'l[1-4]\/terraform-\([^>]*\)-\(l[1-4]-.*\)', '$2/$1'
        $moduleUrl = "https://app.terraform.io/app/cartdotcom/registry/modules/private/cartdotcom/$modulePath"
        echo "module_name=$moduleName" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "module_path=$modulePath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "module_url=$moduleUrl" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append        

  release:
    if: ${{ inputs.module_level != 4 }}
    name: Release
    environment:
      name: release
      url: ${{ needs.module_info.outputs.module_url }}
    needs: [terraform, documentation, module_info]
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: true    
    steps:

    - name: Get Latest Release
      id: latest_release
      shell: pwsh
      run: |
        $tagName = gh api /repos/${{ github.repository }}/releases/latest --jq '.tag_name'
        $commit = gh api /repos/${{ github.repository }}/commits/${{ github.sha }} | ConvertFrom-Json
        Write-Host "Latest release: $tagName"

        $shortCommit = $commit.sha.SubString(0, 7)
        echo "tag_name=$tagName" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "commit_message=$($commit.commit.message)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "commit_url=$($commit.html_url)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "commit_sha_short=$shortCommit" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    

    - name: Calculate Next Release
      id: next_release
      shell: pwsh
      run: |
        echo @"
        body: ${{ steps.latest_release.outputs.commit_message }} 
        "@

        $currentTag = '${{ steps.latest_release.outputs.tag_name }}'
        echo "Current Tag: $currentTag"
        if (-not ($currentTag -match '^(.*?)(\d+)$')) {
          echo 'Invalid current version.'
          exit -1          
        }

        $nextVersion = [int]$Matches[2]
        $nextVersion++
        $fullVersion = "$($Matches[1])$nextVersion"
        echo "Next Tag: $fullVersion"
        echo "release_tag=$fullVersion" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

        $moduleName = '${{ needs.module_info.outputs.module_name }}'
        $modulePath = '${{ needs.module_info.outputs.module_path }}'
        $moduleUrl = '${{ needs.module_info.outputs.module_url }}'

        $summary = @"
        | Name    | Value                        |
        |---------|------------------------------|
        | Module  | [$moduleName]($moduleUrl) |
        | Release | [$fullVersion](https://github.com/${{ github.repository }}/releases/tag/$fullVersion) |
        | Commit  | [${{ steps.latest_release.outputs.commit_sha_short }}](${{ steps.latest_release.outputs.commit_url }}) |

        ### Commit
        ${{ steps.latest_release.outputs.commit_message }}
        "@
        echo $summary | Out-File -FilePath $Env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

    - name: Create New Release
      shell: pwsh
      run: |
        $tagName = '${{ steps.next_release.outputs.release_tag }}'
        $body = @"
        ${{ steps.latest_release.outputs.commit_message }}
        "@

        gh api --method POST -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/releases `
          -f tag_name="$tagName" `
          -f target_commitish="${{ github.sha }}" `
          -f name="$tagName" `
          -f body="$body" `
          -F draft=false `
          -F prerelease=false `
          -F generate_release_notes=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
